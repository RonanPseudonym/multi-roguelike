#include "server.hpp"

void* Server::Listener::GetInAddr(struct sockaddr *sa) {
	if (sa->sa_family == AF_INET) {
		return &(((struct sockaddr_in*)sa)->sin_addr);
	}

	return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

int Server::Listener::GetListenerSocket(const char* port) {
	int listener;
	int yes = 1;
	int rv;

	struct addrinfo hints, *ai, *p;

	memset(&hints, 0, sizeof(hints));
	hints.ai_family = AF_UNSPEC;
	hints.ai_socktype = SOCK_DGRAM;
	hints.ai_flags = AI_PASSIVE;

	if ((rv = getaddrinfo(NULL, port, &hints, &ai)) != 0) {
		fprintf(stderr, "selectserver: %s\n", gai_strerror(rv));
		exit(1);
	}

	for (p = ai; p != NULL; p = p->ai_next) {
		listener = socket(p->ai_family, p->ai_socktype, p->ai_protocol);
		if (listener < 0) continue;

		setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int));

		if (bind(listener, p->ai_addr, p->ai_addrlen) < 0) {
			close(listener);
			continue;
		}

		break;
	}

	freeaddrinfo(ai);

	if (p == NULL) {
		return -1;
	}

	if (listen(listener, 10) == -1) {
		return -1;
	}

	return listener;
}

void Server::Listener::AddToPFDS(struct pollfd *pfds[], int newfd, int *fd_count, int *fd_size) {
	if (*fd_count == *fd_size) {
		return;
		// *fd_size *= 2;
        // *pfds = (pollfd*)realloc(*pfds, sizeof(**pfds) * (*fd_size)); // modified
   	}

	(*pfds)[*fd_count].fd = newfd;
	(*pfds)[*fd_count].events = POLLIN;

	(*fd_count)++;
}

void Server::Listener::DelFromPFDS(struct pollfd pfds[], int i, int *fd_count) {
	pfds[i] = pfds[*fd_count - 1];
	(*fd_count) --;
}

void Server::Listener::Loop(const char* port) {
	int listener;
	int newfd;
	struct sockaddr_storage remoteaddr;
	socklen_t addrlen;

	char buf[256];

	char remoteIP[INET6_ADDRSTRLEN];

	int fd_count = 0;
	int fd_size = 5;
	struct pollfd *pfds = (pollfd*)malloc(sizeof(*pfds) * fd_size);

	listener = GetListenerSocket(port);

	if (listener == -1) {
		fprintf(stderr, "error getting listening socket\n");
		exit(1);
	}

	pfds[0].fd = listener;
	pfds[0].events = POLLIN;

	fd_count = 1;

	for (;;) {
		int poll_count = poll(pfds, fd_count, -1);

		if (poll_count == -1) {
			perror("poll");
			exit(1);
		}

		for (int i = 0; i < fd_count; i ++) {
			if (pfds[i].revents & POLLIN) {
				if (pfds[i].fd == listener) {
					addrlen = sizeof(remoteaddr);
					newfd = accept(listener, (struct sockaddr*)&remoteaddr, &addrlen);

					if (newfd == -1) {
						perror("accept");
					} else {
						AddToPFDS(&pfds, newfd, &fd_count, &fd_size);

						printf("pollserver: new connection");
					}
				} else {
					int nbytes = recv(pfds[i].fd, buf, sizeof(buf), 0);

					int sender_fd = pfds[i].fd;

					if (nbytes <= 0) {
						if (nbytes == 0) {
							printf("pollserver: socket hung up");
						} else {
							perror("recv");
						}

						close(pfds[i].fd);


						DelFromPFDS(pfds, i, &fd_count);
					} else {
						printf(buf);
					}
				}
			}
		}
	}
}